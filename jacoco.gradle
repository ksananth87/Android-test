apply plugin: "org.sonarqube"
apply plugin: 'jacoco'

project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }

    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }
            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            // Create coverage task of form 'testDebugUnitTestCoverage' depending on 'testDebugUnitTest'
            task "${testTaskName}Coverage" (type:JacocoReport, dependsOn: "$testTaskName") {
                group = "Reporting"
                description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                def fileFilter = ['**/R.class',
                                  '**/R$*.class',
                                  '**/*$ViewInjector*.*',
                                  '**/*$ViewBinder*.*',
                                  '**/BuildConfig.*',
                                  '**/Manifest*.*']
                def javaDebugTree = fileTree(dir: "${project.buildDir}/intermediates/javac/debug", excludes: fileFilter) //we use "debug" build type for test coverage (can be other)
                def kotlinDebugTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilter)
                def javaClasses = fileTree(dir: "${project.buildDir}/intermediates/classes/${sourcePath}", excludes: fileFilter)

                classDirectories.from = files([javaDebugTree, kotlinDebugTree, javaClasses])


                def coverageSourceDirs = [
                        "src/main/java",
                        "src/$productFlavorName/java",
                        "src/$buildTypeName/java"
                ]
                additionalSourceDirs.from = files(coverageSourceDirs)
                sourceDirectories.from = files(coverageSourceDirs)

                executionData.from = fileTree(dir: "$buildDir", includes: [
                        "jacoco/testDebugUnitTest.exec", //we use "debug" build type for test coverage (can be other)
                        "outputs/code-coverage/connected/*coverage.ec"
                ])

                reports {
                    xml.enabled = true
                    html.enabled = true
                }
            }
        }
    }
}